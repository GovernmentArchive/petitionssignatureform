<?php

/**
 * @file
 * Provides a form for signing petitions.
 */

/**
 * The machine name of the Petitions PHP SDK library.
 */
define('PETITIONSSIGNATUREFORM_SDK', 'petitions-php-sdk');

/**
 * Implements hook_libraries_info().
 */
function petitionssignatureform_libraries_info() {
  $libraries[PETITIONSSIGNATUREFORM_SDK] = array(
    'name' => 'Petitions PHP SDK',
    'vendor url' => 'https://github.com/WhiteHouse/petitions-php-sdk',
    'download url' => 'https://github.com/WhiteHouse/petitions-php-sdk/releases',
    'version arguments' => array(
      'file' => 'petitions_php_sdk.php',
      'pattern' => '/@version ([\d\.]+)/',
    ),
    'files' => array(
      'php' => array('petitions_php_sdk.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function petitionssignatureform_menu() {
  $items = array();

  $items['admin/config/services/petitionssignatureform'] = array(
    'title' => 'Petitions Signature Form',
    'description' => 'Configure petitions signature forms.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petitionssignatureform_admin_settings_form'),
    'access arguments' => array('administer petitionssignatureform'),
    'file' => 'petitionssignatureform.admin.inc',
  );

  $items['admin/config/services/petitionssignatureform/configure'] = array(
    'title' => 'Configure',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/petitionssignatureform/test'] = array(
    'title' => 'Test',
    'description' => 'Test petitions signature form submission.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petitionssignatureform_signature_form'),
    'access arguments' => array('administer petitionssignatureform'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function petitionssignatureform_permission() {
  return array(
    'administer petitionssignatureform' => array(
      'title' => t('Administer Petitions Signature Form'),
    ),
  );
}

/**
 * Form constructor for the petitions signature form.
 */
function petitionssignatureform_signature_form() {
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'petitionssignatureform') . '/petitionssignatureform.js',
  );

  $form['petition_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Petition ID'),
    '#required' => TRUE,
  );

  $form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
  );
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#required' => TRUE,
  );
  $form['zip_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 10,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Now'),
  );

  $form['sign_up'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sign up for Updates'),
  );

  return $form;
}

/**
 * Form validation handler for petitionssignatureform_signature_form().
 *
 * @see petitionssignatureform_signature_form()
 */
function petitionssignatureform_signature_form_validate($form, &$form_state) {
  // Validate email address.
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', 'Please enter a valid email address.');
  }
}

/**
 * Form submission handler for petitionssignatureform_signature_form().
 *
 * @see petitionssignatureform_signature_form()
 */
function petitionssignatureform_signature_form_submit($form, &$form_state) {
  $base = variable_get('petitionssignatureform_api_endpoint');
  $key = variable_get('petitionssignatureform_api_key');
  $allow_insecure = (bool) variable_get('petitionssignatureform_allow_insecure', FALSE);
  try {
    libraries_load(PETITIONSSIGNATUREFORM_SDK);
    $connector = new PetitionsPhpSdkApiConnector($base, $key, $allow_insecure);

    $signature = array(
      'petition_id' => $form_state['values']['petition_id'],
      'first_name' => $form_state['values']['first_name'],
      'last_name' => $form_state['values']['last_name'],
      'zip' => $form_state['values']['zip_code'],
      'email' => $form_state['values']['email'],
      'signup' => $form_state['values']['sign_up'],
    );

    $response = $connector->sendSignature($signature);
    drupal_set_message(t('Your signature has been submitted.'));
  }
  // A server exception signifies a problem with the target petitions site.
  catch (PetitionsPhpSdkResponseServerException $e) {
    drupal_set_message(t('Your signature can not be submitted at this time. Please try again later or contact a site administrator if the problem persists.'), 'error');
    watchdog('petitionssignatureform', "Error submitting signature:\n\n!exception", array(
      '!exception' => print_r($e, TRUE),
    ), WATCHDOG_ERROR);
  }
  // Most other errors signify a problem with the local configuration.
  catch (Exception $e) {
    drupal_set_message(t('Your signature could not be submitted. Please contact a site administrator.'), 'error');
    watchdog('petitionssignatureform', "Error submitting signature:\n\n!exception", array(
      '!exception' => print_r($e, TRUE),
    ), WATCHDOG_ERROR);
  }
}
